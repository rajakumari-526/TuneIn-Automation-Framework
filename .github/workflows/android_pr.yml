name: Android PR Test Run
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
env:
  BITRISE_ANDROID_APP_SLUG: '783ace2f5373a9a0'
  BITRISE_API_TOKEN: ${{ secrets.BITRISE_API_TOKEN }}
  REPORT_PORTAL_TOKEN: ${{ secrets.REPORT_PORTAL_TOKEN }}
  PR_NUMBER: ${{ github.event.number }}
  GIT_TOKEN: ${{ secrets.AUTOMATION_GIT_TOKEN }}
  HEADSPIN_TOKEN: ${{ secrets.HEADSPIN_TOKEN }}
  APK_BUILD_PATH: '/Users/serviceaccount/Apps/Android/tunein.apk'
  HEADSPIN_DEVICE_UDID: '2A221JEGR10220'
  BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
  LAST_COMMIT: ${{ github.event.pull_request.head.sha }}
  BITRISE_WORKFLOW: 'ANDROID_PR_REPORTING_TEST'
  BITRISE_AUTOMATION_BASE_REPO_URL: 'git@github.com:tunein/mobile-automation-framework.git'
  BITRISE_AUTOMATION_APP_SLUG: 'b2fb2397bbcc4600'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run_pr_test:
    runs-on: pr_runner
    if: always()
    name: Run Android PR test
    steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
        - name: Parse PR data
          id: parse_pr_data
          run: |
            echo "MAINTENANCE_LABEL=$(curl -X GET -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}" "https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}/labels" | jq '.[] | select(.name=="maintenance") | .name')" >> $GITHUB_OUTPUT
            echo "REPORTING_LABEL=$(curl -X GET -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}" "https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}/labels" | jq '.[] | select(.name=="reporting") | .name')" >> $GITHUB_OUTPUT
            echo "ANDROID_LABEL=$(curl -X GET -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}" "https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}/labels" | jq '.[] | select(.name=="Android") | .name')" >> $GITHUB_OUTPUT
            echo "REAL_DEVICE_LABEL=$(curl -X GET -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}" "https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}/labels" | jq '.[] | select(.name=="real_device") | .name')" >> $GITHUB_OUTPUT
            echo "TESTS_LIST=$(curl -X GET -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}" "https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}" | jq -r '.body' | grep '```' | tr -d '```' | tr -d '\n' | tr -d '[:space:]' )" >> $GITHUB_OUTPUT
        - name: Check if we should run test
          id: should_run
          run: |
            echo "List of tests ${{steps.parse_pr_data.outputs.TESTS_LIST}} in pr"
            if [ ! -z ${{steps.parse_pr_data.outputs.MAINTENANCE_LABEL}} ] || [ -z ${{steps.parse_pr_data.outputs.ANDROID_LABEL}} ];
            then
              echo "Skip Android test";
              echo "RUN_UI_TEST=false" >> $GITHUB_OUTPUT;
            elif [ ${{steps.parse_pr_data.outputs.TESTS_LIST}} == "Testnames" ] && [ ! -z ${{steps.parse_pr_data.outputs.ANDROID_LABEL}} ];
            then
              echo "Test name is absent in PR description";
              exit 1;
            elif [ ! -z ${{steps.parse_pr_data.outputs.REPORTING_LABEL}} ] 
            then
            echo "Run Android reporting test";
            echo "RUN_UI_TEST=false" >> $GITHUB_OUTPUT;
            echo "RUN_REPORTING_TEST=true" >> $GITHUB_OUTPUT;
            else  
              echo "Run Android UI test";
              echo "RUN_UI_TEST=true" >> $GITHUB_OUTPUT;
              echo "RUN_REPORTING_TEST=false" >> $GITHUB_OUTPUT;
            fi
        - name: Simulator or Real device
          if: ${{ steps.should_run.outputs.RUN_UI_TEST == 'true' }}
          id: check_device_type
          run: |
            if [ ! -z ${{steps.parse_pr_data.outputs.REAL_DEVICE_LABEL}} ];
            then
              echo "Test on real devices";
              echo "RUN_ON_REAL_DEVICES=true" >> $GITHUB_OUTPUT;
            else  
              echo "Run on simulator";
              echo "RUN_ON_REAL_DEVICES=false" >> $GITHUB_OUTPUT;
            fi
        - name: Check and kill Appium server from previous session
          if: ${{ steps.should_run.outputs.RUN_UI_TEST  == 'true' && steps.check_device_type.outputs.RUN_ON_REAL_DEVICES  == 'false' }}
          id: prepare_port
          run: |
            PORT=$(shuf -i 5200-5310 -n1)
            echo $PORT
            echo "APPIUM_PORT=$PORT" >> $GITHUB_OUTPUT;
            if lsof -ti:$PORT > /tmp/test.txt; then echo 'Server will be killed' && kill $(lsof -ti:$PORT); else echo 'Server is not run'; fi
        - name: Run Emulator
          if: ${{ steps.should_run.outputs.RUN_UI_TEST  == 'true' && steps.check_device_type.outputs.RUN_ON_REAL_DEVICES  == 'false' }}
          id: run_emulator
          run: |
            PORT=$(shuf -i 25000-30000 -n1)
            NAME="Pixel5_"$PORT
            UDID="emulator-"$PORT
            echo $PORT
            echo $NAME
            echo $UDID
            echo "EMULATOR_NAME=$NAME" >> $GITHUB_OUTPUT;
            echo "EMULATOR_UDID=$UDID" >> $GITHUB_OUTPUT;
            echo "no" | /Users/serviceaccount/Library/Android/sdk/cmdline-tools/latest/bin/avdmanager --verbose create avd --force --name "$NAME" --package "system-images;android-34;google_apis;arm64-v8a" --tag "google_apis" --abi "arm64-v8a" --device "pixel_5"
            sleep 10
            sed -i "any" 's/hw.mainKeys = no/hw.mainKeys = yes/g' $HOME/.android/avd/$NAME.avd/config.ini
            RUNNER_TRACKING_ID="" && ~/Library/Android/sdk/emulator/emulator @$NAME -port $((PORT + 0)) -feature -Vulkan -no-audio -netdelay none -no-snapshot -wipe-data -gpu auto -no-window -no-boot-anim &
            adb -s $UDID wait-for-device
        - name: Get Latest Bitrise Build URL
          if: ${{ steps.should_run.outputs.RUN_UI_TEST  == 'true' }}
          id: bitrise-build
          run: |
           BITRISE_BUILD_SLUG=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_ANDROID_APP_SLUG}}/builds?sort_by=running_first&workflow=daily&branch=master&status=1&limit=1" -H "accept: application/json" -H "Authorization: ${{env.BITRISE_API_TOKEN}}" | jq -r '.data[] | .slug')
           echo $BITRISE_BUILD_SLUG
           ARTIFACT_SLUG=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_ANDROID_APP_SLUG}}/builds/$BITRISE_BUILD_SLUG/artifacts" -H "Authorization: ${{env.BITRISE_API_TOKEN}}" -H "accept: application/json" | jq -r '.data[]|  select(.title | startswith("tunein-googleFlavor-tuneinFreeTest-fat-debug")) |.slug')
           echo $ARTIFACT_SLUG
           echo "APP_URL=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_ANDROID_APP_SLUG}}/builds/$BITRISE_BUILD_SLUG/artifacts/$ARTIFACT_SLUG" -H "Authorization: ${{env.BITRISE_API_TOKEN}}" -H "accept: application/json" | jq -r '.data | .expiring_download_url' )" >> $GITHUB_OUTPUT
           echo $APP_URL
        - name: Download App file
          if: ${{ steps.should_run.outputs.RUN_UI_TEST  == 'true' }}
          run: curl "${{steps.bitrise-build.outputs.APP_URL}}" --output "${{env.APK_BUILD_PATH}}"
        - name: Run UI Test
          if: ${{ steps.should_run.outputs.RUN_UI_TEST  == 'true' }}
          run: |
            gradle clean runTest \
                -Dmobile.os=android \
                -Dappium.port=${{steps.prepare_port.outputs.APPIUM_PORT || 5309}} \
                -Drp.description="PR: https://github.com/tunein/mobile-automation-framework/pull/${{env.PR_NUMBER}}" \
                -Dpr.tests="${{steps.parse_pr_data.outputs.TESTS_LIST}}" \
                -Dstore.rp.url.in.file=true \
                -Dorg.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home \
                -Dudid="${{ steps.run_emulator.outputs.EMULATOR_UDID || env.HEADSPIN_DEVICE_UDID }}" \
                -Dold.app.path="/Users/serviceaccount/Apps/oldBuilds/Android/tunein.apk" \
                -Dapp.path="${{env.APK_BUILD_PATH}}" \
                -Dheadspin.app.path="${{env.APK_BUILD_PATH}}" \
                -Dappium.real.device.uninstall.tunein.app=true \
                -Dappium.real.device.install.tunein.app=true \
                -Dtest.on.real.devices=${{ steps.check_device_type.outputs.RUN_ON_REAL_DEVICES }} \
                -Dappium.start.retry.number=5 \
                -Dsuite=for_pr_review \
                -Dappium.use.prelaunched.server=false \
                -Drp.enable=true \
                -Delement.wait.medium.timeout.seconds=20 \
                -Dappium.headless.mode=true \
                -Drp.launch=ANDROID_PR_REVIEW \
                -Delement.wait.long.timeout.seconds=60 \
                -Delement.wait.long.timeout.milliseconds=40000 \
                -Delement.wait.extra.long.timeout.milliseconds=45000 \
                -Delement.wait.short.timeout.seconds=5 \
                -Dpage.ready.timeout.seconds=20 \
                -Dtimeout.for.deeplink.milliseconds=15000 \
                -Delement.visible.timeout.seconds=15 \
                -Dvery.short.wait.timeout.milliseconds=3000 \
                -Dnew.command.timeout.seconds=900 \
                -Delement.wait.very.short.timeout.seconds=5 \
                -Dappium.log.level=debug \
                -Dappium.stream.headspin.token="${{ env.HEADSPIN_TOKEN }}" \
                --info --configure-on-demand
        - name: Trigger Reporting Tests in Bitrise
          if: ${{ steps.should_run.outputs.RUN_REPORTING_TEST  == 'true' }}
          run: |
              curl -X POST \
              -H "Authorization: ${{env.BITRISE_API_TOKEN}}" \
              "https://app.bitrise.io/app/${{env.BITRISE_AUTOMATION_APP_SLUG}}/build/start.json" \
              -H "accept: application/json" \
              -H "Content-Type: application/json" -d \
              '{
               "build_params": {
               "branch": "${{env.BRANCH_NAME}}",
               "workflow_id": "${{env.BITRISE_WORKFLOW}}",
               "commit_message": "branch: ${{env.BRANCH_NAME}} commit: ${{env.LAST_COMMIT}}",
               "environments": [
                   {
                        "mapped_to": "BITRISE_AUTOMATION_BASE_REPO_URL",
                        "value": "${{env.BITRISE_AUTOMATION_BASE_REPO_URL}}",
                        "is_expand": true
                   },
                   {
                        "mapped_to": "BITRISE_AUTOMATION_GIT_COMMIT",
                        "value": "${{env.LAST_COMMIT}}",
                        "is_expand": true
                   },
                   {
                        "mapped_to": "BITRISE_AUTOMATION_GIT_BRANCH",
                         "value": "${{env.BRANCH_NAME}}",
                         "is_expand": true
                   },
                   {
                     "mapped_to": "BITRISE_AUTOMATION_PULL_REQUEST_REPOSITORY_URL",
                     "value": "https://github.com/tunein/mobile-automation-framework/pull/${{env.PR_NUMBER}}",
                     "is_expand": true
                   },
                   {
                     "mapped_to": "PR_NUMBER",
                     "value": "${{env.PR_NUMBER}}",
                     "is_expand": true
                   },
                   {
                     "mapped_to": "TESTS_LIST",
                     "value": "${{steps.parse_pr_data.outputs.TESTS_LIST}}",
                     "is_expand": true
                   }
                 ]
               },
               "hook_info": {
                 "type": "bitrise"
                }
               }'
        - name: Get Bitrise Reporting Test Build Slug
          if: ${{ steps.should_run.outputs.RUN_REPORTING_TEST  == 'true' }}
          id: bitrise_build_slug
          run: |
                  sleep 30
                  BITRISE_BUILD_SLUG=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_AUTOMATION_APP_SLUG}}/builds?sort_by=running_first&workflow=${{env.BITRISE_WORKFLOW}}&branch=${{env.BRANCH_NAME}}&limit=1" -H "accept: application/json" -H "Authorization: ${{env.BITRISE_API_TOKEN}}" | jq -r '.data[] | .slug')
                  echo $BITRISE_BUILD_SLUG
                  echo "BITRISE_AUTOMATION_BUILD_SLUG=$BITRISE_BUILD_SLUG" >> $GITHUB_OUTPUT;
        - name: Wait for Reporting Test
          if: ${{ steps.should_run.outputs.RUN_REPORTING_TEST  == 'true' }}
          id: wait_build
          run: |
                  CURRENT_TIME=$(date +%s)
                  BUILD_STATUS=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_AUTOMATION_APP_SLUG}}/builds/${{steps.bitrise_build_slug.outputs.BITRISE_AUTOMATION_BUILD_SLUG}}" -H "Authorization: ${BITRISE_API_TOKEN}" -H "accept: application/json" | jq -r '.data | .status' )
                  echo $BUILD_STATUS 
                  while [ $BUILD_STATUS != 3 ] && [ $BUILD_STATUS != 1 ] && [ $BUILD_STATUS != 2 ] 
                    do 
                      sleep 120
                      CURRENT_TIME_IN_LOOP=$(date +%s)
                      if (( ($CURRENT_TIME_IN_LOOP - $CURRENT_TIME) > 3000 ));
                        then
                         echo "Close github action as building process takes more than 50 min";
                         exit 1;
                      else 
                         echo "Build is not ready yet, lets wait extra 2 minutes";
                         BUILD_STATUS=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${{env.BITRISE_AUTOMATION_APP_SLUG}}/builds/${{steps.bitrise_build_slug.outputs.BITRISE_AUTOMATION_BUILD_SLUG}}" -H "Authorization: ${BITRISE_API_TOKEN}" -H "accept: application/json" | jq -r '.data | .status' )
                         echo $BUILD_STATUS 
                      fi
                  done
                     if [ $BUILD_STATUS == 1 ]
                      then
                       echo "Build is ready.";
                      else
                       echo "Bitrise build is failed or aborted";
                       exit 1;
                      fi
        - name: Get Report Portal URL
          if: ${{ always() && steps.should_run.outputs.RUN_UI_TEST == 'true' }}
          id: report_portal_url
          run: echo "RP_URL=$(cat android_report_portal_launch_id.txt)" >> $GITHUB_OUTPUT
        - name: Post Report Portal Results
          if: ${{ always() && steps.should_run.outputs.RUN_UI_TEST == 'true' }} 
          run: |
           curl -X POST https://api.github.com/repos/tunein/mobile-automation-framework/issues/${{env.PR_NUMBER}}/comments  -d '{"body":"Android Report Portal Results: ${{steps.report_portal_url.outputs.RP_URL}}"}' -H "Content-Type: application/vnd.github+json" -H "Authorization: token ${{env.GIT_TOKEN}}"
        - name: Delete emulator
          if: ${{ always() && steps.should_run.outputs.RUN_UI_TEST == 'true' && steps.check_device_type.outputs.RUN_ON_REAL_DEVICES == 'false' }}
          run: |
           /Users/serviceaccount/Library/Android/sdk/cmdline-tools/latest/bin/avdmanager delete avd -n ${{steps.run_emulator.outputs.EMULATOR_NAME}}
           adb -s ${{steps.run_emulator.outputs.EMULATOR_UDID}} emu kill
